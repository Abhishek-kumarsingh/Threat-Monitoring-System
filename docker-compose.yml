version: '3.9'

services:
  # MySQL Database
  database:
    image: mysql:8.0
    container_name: threat-analysis-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-threat_analysis_db}
      MYSQL_USER: ${DB_USER:-threat_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-threat_password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - threat-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend Service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: threat-analysis-backend
    restart: unless-stopped
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=database
      - DB_PORT=3306
      - DB_NAME=${DB_NAME:-threat_analysis_db}
      - DB_USERNAME=${DB_USER:-threat_user}
      - DB_PASSWORD=${DB_PASSWORD:-threat_password}
      - JWT_SECRET=${JWT_SECRET:-mySecretKey123456789012345678901234567890}
      - ML_SERVICE_URL=http://ml-service:5000
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
      ml-service:
        condition: service_healthy
    networks:
      - threat-network
    volumes:
      - backend_logs:/app/logs

  # ML Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: threat-analysis-ml
    restart: unless-stopped
    environment:
      - LOG_LEVEL=INFO
    ports:
      - "5000:5000"
    networks:
      - threat-network
    volumes:
      - ml_models:/app/models

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: threat-analysis-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:8080/api
      - REACT_APP_WS_URL=ws://localhost:8080/ws
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - threat-network

  # Redis for caching and session management (optional)
  redis:
    image: redis:7-alpine
    container_name: threat-analysis-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - threat-network
    volumes:
      - redis_data:/data

  # NGINX Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: threat-analysis-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - threat-network

volumes:
  mysql_data:
    driver: local
  backend_logs:
    driver: local
  ml_models:
    driver: local
  redis_data:
    driver: local

networks:
  threat-network:
    driver: bridge
